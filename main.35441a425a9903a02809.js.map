{"version":3,"sources":["webpack:///./js/delay.js","webpack:///./js/toggle.js","webpack:///./js/transaction.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","reject","Error","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAAaA,EAAQ,SAAAC,GACjB,OAAO,IAAIC,SAAQ,SAAAC,GACfC,YAAW,WAAQD,EAAQF,KAAQA,OAInCI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACnBL,EAAM,MAAMS,KAAKJ,G,kCCXXK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAarBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIb,SAAQ,SAACC,EAASa,GACpBF,GAAaC,GAAUC,EAAOC,MAAM,mBAMzCd,EAJqBW,EAASI,KAAI,SAAAC,GAAI,OAClCA,EAAKR,OAASI,EAAd,iBAA8BI,EAA9B,CAAoCP,QAASO,EAAKP,SAAWO,UAWjEd,EAAS,SAAAe,GAAY,OAAIb,QAAQc,MAAMD,IAW7CP,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GC3CrC,IAkBMiB,EAAkB,SAAAC,GACpB,IAnB+BC,EAAKC,EAmB9BzB,GAnByBwB,EAmBS,IAnBJC,EAmBS,IAlBtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAoBpD,OAAO,IAAItB,SAAQ,SAACC,EAASa,GACzBZ,YAAW,WACYsB,KAAKE,SAAW,GAEjBzB,EAAQ,CAAE0B,GAAIN,EAAYM,GAAIvB,KAAMN,IAEtDgB,EAAOO,EAAYM,MAEpB7B,OAIH8B,EAAa,SAAC,GAAe,IAAdD,EAAc,EAAdA,GAAIvB,EAAU,EAAVA,KACvBC,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,OAGIyB,EAAW,SAAAF,GACftB,QAAQyB,KAAR,gCAA6CH,EAA7C,8BAaFP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAC/BxB,KAAKqB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,K","file":"main.35441a425a9903a02809.js","sourcesContent":["export const delay = ms => {\n    return new Promise(resolve => {\n        setTimeout(() => { resolve(ms); }, ms);\n    });\n  };\n\n  const logger = time => console.log(`Resolved after ${time}ms`);\n\n  // Вызовы функции для проверки\n  delay(2000).then(logger); // Resolved after 2000ms\n  delay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n","const users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n  ];\n/*\nconst toggleUserState = (allUsers, userName, callback) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );\n\n  callback(updatedUsers);\n};\n\n*/\n\nconst toggleUserState = (allUsers, userName) => {\n    return new Promise((resolve, reject) => {\n        if (!allUsers || !userName) reject(Error('User not found'));\n\n        const updatedUsers = allUsers.map(user =>\n            user.name === userName ? { ...user, active: !user.active } : user,\n        );\n\n        resolve(updatedUsers);\n    });\n};\n\n\n\n    //   return Promise.resolve(updatedUsers);\n\n  const logger = updatedUsers => console.table(updatedUsers);\n\n  /*\n   * Сейчас работает так\n   */\n /*  toggleUserState(users, 'Mango', logger);\n  toggleUserState(users, 'Lux', logger);\n */\n  /*\n   * Должно работать так\n   */\n  toggleUserState(users, 'Mango').then(logger);\n  toggleUserState(users, 'Lux').then(logger);","// const { resolve } = require(\"core-js/fn/promise\");\n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n/*   const makeTransaction = (transaction, onSuccess, onError) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        onSuccess(transaction.id, delay);\n      } else {\n        onError(transaction.id);\n      }\n    }, delay);\n  }; */\n\nconst makeTransaction = transaction => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) { resolve({ id: transaction.id, time: delay }) }\n            else {\n            reject(transaction.id);\n            }\n        }, delay);\n    });\n}\n\n  const logSuccess = ({id, time}) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n  };\n\n  const logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n\n  /*\n   * Работает так\n   */\n/*   makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n  makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n  makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n  makeTransaction({ id: 73, amount: 100 }, logSuccess, logError); */\n  /*\n   * Должно работать так\n   */\n  makeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n\n  makeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n\n  makeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess)\n    .catch(logError);\n\n  makeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess)\n    .catch(logError);"],"sourceRoot":""}